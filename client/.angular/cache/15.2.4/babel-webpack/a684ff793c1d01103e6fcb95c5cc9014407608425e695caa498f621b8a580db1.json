{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { Directive, ElementRef, EventEmitter, Inject, Injectable, Input, Output, PLATFORM_ID, NgZone } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nvar ClickOutsideDirective = function () {\n  function ClickOutsideDirective(_el, _ngZone, platformId) {\n    this._el = _el;\n    this._ngZone = _ngZone;\n    this.platformId = platformId;\n    this.clickOutsideEnabled = true;\n    this.attachOutsideOnClick = false;\n    this.delayClickOutsideInit = false;\n    this.emitOnBlur = false;\n    this.exclude = '';\n    this.excludeBeforeClick = false;\n    this.clickOutsideEvents = '';\n    this.clickOutside = new EventEmitter();\n    this._nodesExcluded = [];\n    this._events = ['click'];\n    this._initOnClickBody = this._initOnClickBody.bind(this);\n    this._onClickBody = this._onClickBody.bind(this);\n    this._onWindowBlur = this._onWindowBlur.bind(this);\n  }\n  ClickOutsideDirective.prototype.ngOnInit = function () {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    this._init();\n  };\n  ClickOutsideDirective.prototype.ngOnDestroy = function () {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    this._removeClickOutsideListener();\n    this._removeAttachOutsideOnClickListener();\n    this._removeWindowBlurListener();\n  };\n  ClickOutsideDirective.prototype.ngOnChanges = function (changes) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n    if (changes['attachOutsideOnClick'] || changes['exclude'] || changes['emitOnBlur']) {\n      this._init();\n    }\n  };\n  ClickOutsideDirective.prototype._init = function () {\n    if (this.clickOutsideEvents !== '') {\n      this._events = this.clickOutsideEvents.split(',').map(function (e) {\n        return e.trim();\n      });\n    }\n    this._excludeCheck();\n    if (this.attachOutsideOnClick) {\n      this._initAttachOutsideOnClickListener();\n    } else {\n      this._initOnClickBody();\n    }\n    if (this.emitOnBlur) {\n      this._initWindowBlurListener();\n    }\n  };\n  ClickOutsideDirective.prototype._initOnClickBody = function () {\n    if (this.delayClickOutsideInit) {\n      setTimeout(this._initClickOutsideListener.bind(this));\n    } else {\n      this._initClickOutsideListener();\n    }\n  };\n  ClickOutsideDirective.prototype._excludeCheck = function () {\n    if (this.exclude) {\n      try {\n        var nodes = Array.from(document.querySelectorAll(this.exclude));\n        if (nodes) {\n          this._nodesExcluded = nodes;\n        }\n      } catch (err) {\n        console.error('[ng-click-outside] Check your exclude selector syntax.', err);\n      }\n    }\n  };\n  ClickOutsideDirective.prototype._onClickBody = function (ev) {\n    if (!this.clickOutsideEnabled) {\n      return;\n    }\n    if (this.excludeBeforeClick) {\n      this._excludeCheck();\n    }\n    if (!this._el.nativeElement.contains(ev.target) && !this._shouldExclude(ev.target)) {\n      this._emit(ev);\n      if (this.attachOutsideOnClick) {\n        this._removeClickOutsideListener();\n      }\n    }\n  };\n  ClickOutsideDirective.prototype._onWindowBlur = function (ev) {\n    var _this = this;\n    setTimeout(function () {\n      if (!document.hidden) {\n        _this._emit(ev);\n      }\n    });\n  };\n  ClickOutsideDirective.prototype._emit = function (ev) {\n    var _this = this;\n    if (!this.clickOutsideEnabled) {\n      return;\n    }\n    this._ngZone.run(function () {\n      return _this.clickOutside.emit(ev);\n    });\n  };\n  ClickOutsideDirective.prototype._shouldExclude = function (target) {\n    for (var _i = 0, _a = this._nodesExcluded; _i < _a.length; _i++) {\n      var excludedNode = _a[_i];\n      if (excludedNode.contains(target)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  ClickOutsideDirective.prototype._initClickOutsideListener = function () {\n    var _this = this;\n    this._ngZone.runOutsideAngular(function () {\n      _this._events.forEach(function (e) {\n        return document.addEventListener(e, _this._onClickBody);\n      });\n    });\n  };\n  ClickOutsideDirective.prototype._removeClickOutsideListener = function () {\n    var _this = this;\n    this._ngZone.runOutsideAngular(function () {\n      _this._events.forEach(function (e) {\n        return document.removeEventListener(e, _this._onClickBody);\n      });\n    });\n  };\n  ClickOutsideDirective.prototype._initAttachOutsideOnClickListener = function () {\n    var _this = this;\n    this._ngZone.runOutsideAngular(function () {\n      _this._events.forEach(function (e) {\n        return _this._el.nativeElement.addEventListener(e, _this._initOnClickBody);\n      });\n    });\n  };\n  ClickOutsideDirective.prototype._removeAttachOutsideOnClickListener = function () {\n    var _this = this;\n    this._ngZone.runOutsideAngular(function () {\n      _this._events.forEach(function (e) {\n        return _this._el.nativeElement.removeEventListener(e, _this._initOnClickBody);\n      });\n    });\n  };\n  ClickOutsideDirective.prototype._initWindowBlurListener = function () {\n    var _this = this;\n    this._ngZone.runOutsideAngular(function () {\n      window.addEventListener('blur', _this._onWindowBlur);\n    });\n  };\n  ClickOutsideDirective.prototype._removeWindowBlurListener = function () {\n    var _this = this;\n    this._ngZone.runOutsideAngular(function () {\n      window.removeEventListener('blur', _this._onWindowBlur);\n    });\n  };\n  __decorate([Input(), __metadata(\"design:type\", Boolean)], ClickOutsideDirective.prototype, \"clickOutsideEnabled\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", Boolean)], ClickOutsideDirective.prototype, \"attachOutsideOnClick\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", Boolean)], ClickOutsideDirective.prototype, \"delayClickOutsideInit\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", Boolean)], ClickOutsideDirective.prototype, \"emitOnBlur\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", String)], ClickOutsideDirective.prototype, \"exclude\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", Boolean)], ClickOutsideDirective.prototype, \"excludeBeforeClick\", void 0);\n  __decorate([Input(), __metadata(\"design:type\", String)], ClickOutsideDirective.prototype, \"clickOutsideEvents\", void 0);\n  __decorate([Output(), __metadata(\"design:type\", EventEmitter)], ClickOutsideDirective.prototype, \"clickOutside\", void 0);\n  ClickOutsideDirective = __decorate([__param(2, Inject(PLATFORM_ID)), __metadata(\"design:paramtypes\", [ElementRef, NgZone, Object])], ClickOutsideDirective);\n  ClickOutsideDirective.ɵfac = function ClickOutsideDirective_Factory(t) {\n    return new (t || ClickOutsideDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n  ClickOutsideDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClickOutsideDirective,\n    selectors: [[\"\", \"clickOutside\", \"\"]],\n    inputs: {\n      clickOutsideEnabled: \"clickOutsideEnabled\",\n      attachOutsideOnClick: \"attachOutsideOnClick\",\n      delayClickOutsideInit: \"delayClickOutsideInit\",\n      emitOnBlur: \"emitOnBlur\",\n      exclude: \"exclude\",\n      excludeBeforeClick: \"excludeBeforeClick\",\n      clickOutsideEvents: \"clickOutsideEvents\"\n    },\n    outputs: {\n      clickOutside: \"clickOutside\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  ClickOutsideDirective.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ClickOutsideDirective,\n    factory: function (t) {\n      return ClickOutsideDirective.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return ClickOutsideDirective;\n}();\nexport { ClickOutsideDirective };\n\n//# sourceMappingURL=click-outside.directive.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}